{{>licenseInfo}}
{{#models}}{{#model}}
#include "{{classname}}.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


{{classname}}::{{classname}}(const QString &json) {
    init();
    this->fromJson(json);
}

{{classname}}::{{classname}}() {
    init();
}

{{classname}}::~{{classname}}() {
}

void
{{classname}}::init() {
    {{#vars}}{{name}} = {{{defaultValue}}};
    {{/vars}}
}

void
{{classname}}::fromJson(const QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
{{classname}}::fromJsonObject(const QJsonObject &pJson) {
{{#vars}}
    {{#isContainer}}
    this->{{name}} = ::Swagger::toValue<{{{baseType}}}, {{complexType}}>(pJson["{{name}}"]);
    {{/isContainer}}
    {{^isContainer}}
    this->{{name}} = ::Swagger::toValue<{{{datatype}}}>(pJson["{{name}}"]);
    {{/isContainer}}
{{/vars}}
}

QString
{{classname}}::asJson () const
{
    QJsonObject obj = this->asJsonObject();
    
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
{{classname}}::asJsonObject() const {
    QJsonObject obj;

{{#vars}}
    {{#complexType}}obj.insert("{{name}}", toJsonValue(this->{{name}}));{{/complexType}}
    {{^complexType}}obj.insert("{{name}}", QJsonValue(this->{{name}}));{{/complexType}}
{{/vars}}

    return obj;
}

{{#vars}}
{{{datatype}}}
{{classname}}::{{getter}}() const {
    return {{name}};
}
void
{{classname}}::{{setter}}(const {{{datatype}}} &{{name}}) {
    this->{{name}} = {{name}};
}

{{/vars}}


} /* namespace Swagger */

{{/model}}
{{/models}}
